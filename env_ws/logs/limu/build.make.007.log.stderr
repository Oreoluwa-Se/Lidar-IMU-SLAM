In file included from [01m[K/mnt/c/wslShared/robotics/lidar/lidar-imu-slam/env_ws/src/limu/src/sensors/lidar/helpers/voxel_hash_map.cpp:3[m[K:
/usr/include/tbb/parallel_for_each.h: In instantiation of â€˜[01m[Kvoid tbb::internal::parallel_for_each_body_do<Function, Iterator>::operator()(typename std::iterator_traits<_II>::reference) const [with Function = lidar::VoxelHashMap::remove_points_from_far(const Vec3d&)::<lambda(map_iterator)>; Iterator = tsl::detail_robin_hash::robin_hash<std::pair<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock>, tsl::robin_map<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock, utils::VoxelHash>::KeySelect, tsl::robin_map<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock, utils::VoxelHash>::ValueSelect, utils::VoxelHash, std::equal_to<Eigen::Matrix<int, 3, 1> >, std::allocator<std::pair<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock> >, false, tsl::rh::power_of_two_growth_policy<2> >::robin_iterator<false>; typename std::iterator_traits<_II>::reference = const std::pair<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock>&][m[Kâ€™:
[01m[K/usr/include/tbb/parallel_do.h:504:66:[m[K   required from â€˜[01m[Kvoid tbb::parallel_do(Iterator, Iterator, const Body&) [with Iterator = tsl::detail_robin_hash::robin_hash<std::pair<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock>, tsl::robin_map<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock, utils::VoxelHash>::KeySelect, tsl::robin_map<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock, utils::VoxelHash>::ValueSelect, utils::VoxelHash, std::equal_to<Eigen::Matrix<int, 3, 1> >, std::allocator<std::pair<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock> >, false, tsl::rh::power_of_two_growth_policy<2> >::robin_iterator<false>; Body = tbb::internal::parallel_for_each_body_do<lidar::VoxelHashMap::remove_points_from_far(const Vec3d&)::<lambda(map_iterator)>, tsl::detail_robin_hash::robin_hash<std::pair<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock>, tsl::robin_map<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock, utils::VoxelHash>::KeySelect, tsl::robin_map<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock, utils::VoxelHash>::ValueSelect, utils::VoxelHash, std::equal_to<Eigen::Matrix<int, 3, 1> >, std::allocator<std::pair<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock> >, false, tsl::rh::power_of_two_growth_policy<2> >::robin_iterator<false> >][m[Kâ€™
[01m[K/usr/include/tbb/parallel_for_each.h:66:29:[m[K   required from â€˜[01m[Kstatic void tbb::internal::parallel_for_each_impl<Iterator, Function, Generic>::doit(Iterator, Iterator, const Function&) [with Iterator = tsl::detail_robin_hash::robin_hash<std::pair<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock>, tsl::robin_map<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock, utils::VoxelHash>::KeySelect, tsl::robin_map<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock, utils::VoxelHash>::ValueSelect, utils::VoxelHash, std::equal_to<Eigen::Matrix<int, 3, 1> >, std::allocator<std::pair<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock> >, false, tsl::rh::power_of_two_growth_policy<2> >::robin_iterator<false>; Function = lidar::VoxelHashMap::remove_points_from_far(const Vec3d&)::<lambda(map_iterator)>; Generic = std::forward_iterator_tag][m[Kâ€™
[01m[K/usr/include/tbb/parallel_for_each.h:114:123:[m[K   required from â€˜[01m[Kvoid tbb::parallel_for_each(Iterator, Iterator, const Function&) [with Iterator = tsl::detail_robin_hash::robin_hash<std::pair<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock>, tsl::robin_map<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock, utils::VoxelHash>::KeySelect, tsl::robin_map<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock, utils::VoxelHash>::ValueSelect, utils::VoxelHash, std::equal_to<Eigen::Matrix<int, 3, 1> >, std::allocator<std::pair<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock> >, false, tsl::rh::power_of_two_growth_policy<2> >::robin_iterator<false>; Function = lidar::VoxelHashMap::remove_points_from_far(const Vec3d&)::<lambda(map_iterator)>][m[Kâ€™
[01m[K/mnt/c/wslShared/robotics/lidar/lidar-imu-slam/env_ws/src/limu/src/sensors/lidar/helpers/voxel_hash_map.cpp:186:20:[m[K   required from here
[01m[K/usr/include/tbb/parallel_for_each.h:35:20:[m[K [01;31m[Kerror: [m[Kno match for call to â€˜[01m[K(const lidar::VoxelHashMap::remove_points_from_far(const Vec3d&)::<lambda(map_iterator)>) (tsl::detail_robin_hash::robin_hash<std::pair<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock>, tsl::robin_map<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock, utils::VoxelHash>::KeySelect, tsl::robin_map<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock, utils::VoxelHash>::ValueSelect, utils::VoxelHash, std::equal_to<Eigen::Matrix<int, 3, 1> >, std::allocator<std::pair<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock> >, false, tsl::rh::power_of_two_growth_policy<2> >::robin_iterator<false>::value_type&)[m[Kâ€™
   35 |             [01;31m[Kmy_func(value)[m[K;
      |             [01;31m[K~~~~~~~^~~~~~~[m[K
[01m[K/mnt/c/wslShared/robotics/lidar/lidar-imu-slam/env_ws/src/limu/src/sensors/lidar/helpers/voxel_hash_map.cpp:174:13:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Klidar::VoxelHashMap::remove_points_from_far(const Vec3d&)::<lambda(map_iterator)>[m[Kâ€™
  174 |             [01;36m[K[[m[K&](map_iterator it)
      |             [01;36m[K^[m[K
[01m[K/mnt/c/wslShared/robotics/lidar/lidar-imu-slam/env_ws/src/limu/src/sensors/lidar/helpers/voxel_hash_map.cpp:174:13:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Ktsl::detail_robin_hash::robin_hash<std::pair<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock>, tsl::robin_map<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock, utils::VoxelHash>::KeySelect, tsl::robin_map<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock, utils::VoxelHash>::ValueSelect, utils::VoxelHash, std::equal_to<Eigen::Matrix<int, 3, 1> >, std::allocator<std::pair<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock> >, false, tsl::rh::power_of_two_growth_policy<2> >::robin_iterator<false>::value_type[m[Kâ€™ {aka â€˜[01m[Kconst std::pair<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock>[m[Kâ€™} to â€˜[01m[Kmap_iterator[m[Kâ€™ {aka â€˜[01m[Ktsl::detail_robin_hash::robin_hash<std::pair<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock>, tsl::robin_map<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock, utils::VoxelHash>::KeySelect, tsl::robin_map<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock, utils::VoxelHash>::ValueSelect, utils::VoxelHash, std::equal_to<Eigen::Matrix<int, 3, 1> >, std::allocator<std::pair<Eigen::Matrix<int, 3, 1>, lidar::VoxelBlock> >, false, tsl::rh::power_of_two_growth_policy<2> >::robin_iterator<false>[m[Kâ€™}
make[2]: *** [CMakeFiles/limu.dir/build.make:154: CMakeFiles/limu.dir/src/sensors/lidar/helpers/voxel_hash_map.cpp.o] Error 1
make[1]: *** [CMakeFiles/Makefile2:225: CMakeFiles/limu.dir/all] Error 2
make: *** [Makefile:141: all] Error 2
